
calculadora4x4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b4c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08000c0c  08000c0c  00010c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ce8  08000ce8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000ce8  08000ce8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ce8  08000ce8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ce8  08000ce8  00010ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cec  08000cec  00010cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000cf0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000cf4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000cf4  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000487  00000000  00000000  0002006f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001e6  00000000  00000000  000204f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  000206e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000053  00000000  00000000  00020758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001019  00000000  00000000  000207ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000082e  00000000  00000000  000217c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004022  00000000  00000000  00021ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000015c  00000000  00000000  00026014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00026170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000bf4 	.word	0x08000bf4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08000bf4 	.word	0x08000bf4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <codigo_tecla>:
    siete, ocho, nueve, C, // Contenidos de la Columna 3
    E, cero, F, D // Contenidos de la Columna 4
};

// Define una función para mapear un código de tecla a su número correspondiente.
uint8_t codigo_tecla(uint8_t key){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	0002      	movs	r2, r0
 80003fc:	1dfb      	adds	r3, r7, #7
 80003fe:	701a      	strb	r2, [r3, #0]
	switch (key){
 8000400:	1dfb      	adds	r3, r7, #7
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b0d      	cmp	r3, #13
 8000406:	d818      	bhi.n	800043a <codigo_tecla+0x46>
 8000408:	009a      	lsls	r2, r3, #2
 800040a:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <codigo_tecla+0x50>)
 800040c:	18d3      	adds	r3, r2, r3
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	469f      	mov	pc, r3
		case 0: return 1; // Cuando la tecla es 0, retorna 1.
 8000412:	2301      	movs	r3, #1
 8000414:	e012      	b.n	800043c <codigo_tecla+0x48>
		case 1: return 2; // Cuando la tecla es 1, retorna 2.
 8000416:	2302      	movs	r3, #2
 8000418:	e010      	b.n	800043c <codigo_tecla+0x48>
		case 2: return 3; // Cuando la tecla es 2, retorna 3.
 800041a:	2303      	movs	r3, #3
 800041c:	e00e      	b.n	800043c <codigo_tecla+0x48>
		case 4: return 4; // Cuando la tecla es 4, retorna 4.
 800041e:	2304      	movs	r3, #4
 8000420:	e00c      	b.n	800043c <codigo_tecla+0x48>
		case 5: return 5; // Cuando la tecla es 5, retorna 5.
 8000422:	2305      	movs	r3, #5
 8000424:	e00a      	b.n	800043c <codigo_tecla+0x48>
		case 6: return 6; // Cuando la tecla es 6, retorna 6.
 8000426:	2306      	movs	r3, #6
 8000428:	e008      	b.n	800043c <codigo_tecla+0x48>
		case 8: return 7; // Cuando la tecla es 8, retorna 7.
 800042a:	2307      	movs	r3, #7
 800042c:	e006      	b.n	800043c <codigo_tecla+0x48>
		case 9: return 8; // Cuando la tecla es 9, retorna 8.
 800042e:	2308      	movs	r3, #8
 8000430:	e004      	b.n	800043c <codigo_tecla+0x48>
		case 10: return 9; // Cuando la tecla es 10, retorna 9.
 8000432:	2309      	movs	r3, #9
 8000434:	e002      	b.n	800043c <codigo_tecla+0x48>
		case 13: return 0; // Cuando la tecla es 13, retorna 0.
 8000436:	2300      	movs	r3, #0
 8000438:	e000      	b.n	800043c <codigo_tecla+0x48>
		default: return 0; // En cualquier otro caso, retorna 0.
 800043a:	2300      	movs	r3, #0
	}
}
 800043c:	0018      	movs	r0, r3
 800043e:	46bd      	mov	sp, r7
 8000440:	b002      	add	sp, #8
 8000442:	bd80      	pop	{r7, pc}
 8000444:	08000c1c 	.word	0x08000c1c

08000448 <numero>:

// Define una función para obtener el código de tecla correspondiente a un número.
uint8_t numero(uint8_t number){
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	0002      	movs	r2, r0
 8000450:	1dfb      	adds	r3, r7, #7
 8000452:	701a      	strb	r2, [r3, #0]
	switch (number){
 8000454:	1dfb      	adds	r3, r7, #7
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b09      	cmp	r3, #9
 800045a:	d818      	bhi.n	800048e <numero+0x46>
 800045c:	009a      	lsls	r2, r3, #2
 800045e:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <numero+0x50>)
 8000460:	18d3      	adds	r3, r2, r3
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	469f      	mov	pc, r3
		case 1: return 0; // Cuando el número es 1, retorna 0.
 8000466:	2300      	movs	r3, #0
 8000468:	e012      	b.n	8000490 <numero+0x48>
		case 2: return 1; // Cuando el número es 2, retorna 1.
 800046a:	2301      	movs	r3, #1
 800046c:	e010      	b.n	8000490 <numero+0x48>
		case 3: return 2; // Cuando el número es 3, retorna 2.
 800046e:	2302      	movs	r3, #2
 8000470:	e00e      	b.n	8000490 <numero+0x48>
		case 4: return 4; // Cuando el número es 4, retorna 4.
 8000472:	2304      	movs	r3, #4
 8000474:	e00c      	b.n	8000490 <numero+0x48>
		case 5: return 5; // Cuando el número es 5, retorna 5.
 8000476:	2305      	movs	r3, #5
 8000478:	e00a      	b.n	8000490 <numero+0x48>
		case 6: return 6; // Cuando el número es 6, retorna 6.
 800047a:	2306      	movs	r3, #6
 800047c:	e008      	b.n	8000490 <numero+0x48>
		case 7: return 8; // Cuando el número es 7, retorna 8.
 800047e:	2308      	movs	r3, #8
 8000480:	e006      	b.n	8000490 <numero+0x48>
		case 8: return 9; // Cuando el número es 8, retorna 9.
 8000482:	2309      	movs	r3, #9
 8000484:	e004      	b.n	8000490 <numero+0x48>
		case 9: return 10; // Cuando el número es 9, retorna 10.
 8000486:	230a      	movs	r3, #10
 8000488:	e002      	b.n	8000490 <numero+0x48>
		case 0: return 13; // Cuando el número es 0, retorna 13.
 800048a:	230d      	movs	r3, #13
 800048c:	e000      	b.n	8000490 <numero+0x48>
		default: return 13; // En cualquier otro caso, retorna 13.
 800048e:	230d      	movs	r3, #13
	}
}
 8000490:	0018      	movs	r0, r3
 8000492:	46bd      	mov	sp, r7
 8000494:	b002      	add	sp, #8
 8000496:	bd80      	pop	{r7, pc}
 8000498:	08000c54 	.word	0x08000c54

0800049c <main>:


int main(void)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b087      	sub	sp, #28
 80004a0:	af00      	add	r7, sp, #0

	// Activación de los relojes para los puertos GPIOC y GPIOB para permitir su funcionamiento
	RCC->IOPENR |= (1 << 2) | (1 << 1) | (1 << 0);
 80004a2:	4bec      	ldr	r3, [pc, #944]	; (8000854 <main+0x3b8>)
 80004a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004a6:	4beb      	ldr	r3, [pc, #940]	; (8000854 <main+0x3b8>)
 80004a8:	2107      	movs	r1, #7
 80004aa:	430a      	orrs	r2, r1
 80004ac:	62da      	str	r2, [r3, #44]	; 0x2c

	// Definir los pines específicos de GPIOC como salidas, configurándolos para controlar los displays
	uint32_t portC_masks = (0b01 << 8) | (0b01 << 10) | (0b01 << 12) | (0b01 << 14) | (0b01 << 16) | (0b01 << 18);
 80004ae:	4bea      	ldr	r3, [pc, #936]	; (8000858 <main+0x3bc>)
 80004b0:	60fb      	str	r3, [r7, #12]
	GPIOC->MODER &= ~(0b11 << 8 | 0b11 << 10 | 0b11 << 12 | 0b11 << 14 | 0b11 << 16 | 0b11 << 18);
 80004b2:	4bea      	ldr	r3, [pc, #936]	; (800085c <main+0x3c0>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	4be9      	ldr	r3, [pc, #932]	; (800085c <main+0x3c0>)
 80004b8:	49e9      	ldr	r1, [pc, #932]	; (8000860 <main+0x3c4>)
 80004ba:	400a      	ands	r2, r1
 80004bc:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= portC_masks;
 80004be:	4be7      	ldr	r3, [pc, #924]	; (800085c <main+0x3c0>)
 80004c0:	6819      	ldr	r1, [r3, #0]
 80004c2:	4be6      	ldr	r3, [pc, #920]	; (800085c <main+0x3c0>)
 80004c4:	68fa      	ldr	r2, [r7, #12]
 80004c6:	430a      	orrs	r2, r1
 80004c8:	601a      	str	r2, [r3, #0]

	// Preparar pines de GPIOB para manejar los segmentos de los displays, estableciendo su dirección como salida
	GPIOB->MODER &= ~(0xFFFF); // Resetear la configuración de los pines para asegurar una base limpia
 80004ca:	4be6      	ldr	r3, [pc, #920]	; (8000864 <main+0x3c8>)
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	4be5      	ldr	r3, [pc, #916]	; (8000864 <main+0x3c8>)
 80004d0:	0c12      	lsrs	r2, r2, #16
 80004d2:	0412      	lsls	r2, r2, #16
 80004d4:	601a      	str	r2, [r3, #0]
	uint32_t portB_display_masks = (0b01 << 0) | (0b01 << 2) | (0b01 << 4) | (0b01 << 6) |
 80004d6:	4be4      	ldr	r3, [pc, #912]	; (8000868 <main+0x3cc>)
 80004d8:	60bb      	str	r3, [r7, #8]
	                               (0b01 << 8) | (0b01 << 10) | (0b01 << 12) | (0b01 << 14);
	GPIOB->MODER |= portB_display_masks; // Aplicar la máscara para configurar los pines como salidas
 80004da:	4be2      	ldr	r3, [pc, #904]	; (8000864 <main+0x3c8>)
 80004dc:	6819      	ldr	r1, [r3, #0]
 80004de:	4be1      	ldr	r3, [pc, #900]	; (8000864 <main+0x3c8>)
 80004e0:	68ba      	ldr	r2, [r7, #8]
 80004e2:	430a      	orrs	r2, r1
 80004e4:	601a      	str	r2, [r3, #0]

	// Establecer pines específicos de GPIOB para controlar las columnas de la matriz del teclado como salidas
	GPIOB->MODER &= ~((0b11 << 24) | (0b11 << 26) | (0b11 << 28) | (0b11 << 30)); // Resetear configuración actual
 80004e6:	4bdf      	ldr	r3, [pc, #892]	; (8000864 <main+0x3c8>)
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	4bde      	ldr	r3, [pc, #888]	; (8000864 <main+0x3c8>)
 80004ec:	0212      	lsls	r2, r2, #8
 80004ee:	0a12      	lsrs	r2, r2, #8
 80004f0:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= ((0b01 << 24) | (0b01 << 26) | (0b01 << 28) | (0b01 << 30)); // Configurar como salidas
 80004f2:	4bdc      	ldr	r3, [pc, #880]	; (8000864 <main+0x3c8>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	4bdb      	ldr	r3, [pc, #876]	; (8000864 <main+0x3c8>)
 80004f8:	21aa      	movs	r1, #170	; 0xaa
 80004fa:	05c9      	lsls	r1, r1, #23
 80004fc:	430a      	orrs	r2, r1
 80004fe:	601a      	str	r2, [r3, #0]

	// Ajustar los pines de GPIOB para utilizar resistencias pull-up y mejorar la fiabilidad de la lectura de entradas
	GPIOB->PUPDR &= ~((0b11 << 16) | (0b11 << 18) | (0b11 << 20) | (0b11 << 22)); // Resetear configuraciones previas
 8000500:	4bd8      	ldr	r3, [pc, #864]	; (8000864 <main+0x3c8>)
 8000502:	68da      	ldr	r2, [r3, #12]
 8000504:	4bd7      	ldr	r3, [pc, #860]	; (8000864 <main+0x3c8>)
 8000506:	49d9      	ldr	r1, [pc, #868]	; (800086c <main+0x3d0>)
 8000508:	400a      	ands	r2, r1
 800050a:	60da      	str	r2, [r3, #12]
	GPIOB->PUPDR |= ((0b01 << 16) | (0b01 << 18) | (0b01 << 20) | (0b01 << 22)); // Activar resistencias pull-up
 800050c:	4bd5      	ldr	r3, [pc, #852]	; (8000864 <main+0x3c8>)
 800050e:	68da      	ldr	r2, [r3, #12]
 8000510:	4bd4      	ldr	r3, [pc, #848]	; (8000864 <main+0x3c8>)
 8000512:	21aa      	movs	r1, #170	; 0xaa
 8000514:	03c9      	lsls	r1, r1, #15
 8000516:	430a      	orrs	r2, r1
 8000518:	60da      	str	r2, [r3, #12]

	// Configurar pines seleccionados en GPIOB para actuar como entradas, destinadas a la lectura del teclado matricial
	GPIOB->MODER &= ~((0b11 << 16) | (0b11 << 18) | (0b11 << 20) | (0b11 << 22)); // Limpiar configuración para asegurar que son entradas
 800051a:	4bd2      	ldr	r3, [pc, #840]	; (8000864 <main+0x3c8>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	4bd1      	ldr	r3, [pc, #836]	; (8000864 <main+0x3c8>)
 8000520:	49d2      	ldr	r1, [pc, #840]	; (800086c <main+0x3d0>)
 8000522:	400a      	ands	r2, r1
 8000524:	601a      	str	r2, [r3, #0]


    while (1)
    {
        for (int col = 0; col < 4; col++)
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
 800052a:	e1c4      	b.n	80008b6 <main+0x41a>
        {
            GPIOB->ODR = (0xF << 12); // Desactiva todas las columnas
 800052c:	4bcd      	ldr	r3, [pc, #820]	; (8000864 <main+0x3c8>)
 800052e:	22f0      	movs	r2, #240	; 0xf0
 8000530:	0212      	lsls	r2, r2, #8
 8000532:	615a      	str	r2, [r3, #20]
            GPIOB->ODR &= ~(1 << (12 + col)); // Activa solo la columna actual
 8000534:	4bcb      	ldr	r3, [pc, #812]	; (8000864 <main+0x3c8>)
 8000536:	695a      	ldr	r2, [r3, #20]
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	330c      	adds	r3, #12
 800053c:	2101      	movs	r1, #1
 800053e:	4099      	lsls	r1, r3
 8000540:	000b      	movs	r3, r1
 8000542:	43db      	mvns	r3, r3
 8000544:	0019      	movs	r1, r3
 8000546:	4bc7      	ldr	r3, [pc, #796]	; (8000864 <main+0x3c8>)
 8000548:	400a      	ands	r2, r1
 800054a:	615a      	str	r2, [r3, #20]

            retraso(10); // Deja tiempo para la estabilización
 800054c:	200a      	movs	r0, #10
 800054e:	f000 f9c9 	bl	80008e4 <retraso>

            uint32_t rows = GPIOB->IDR & (0xF << 8); // Lee el estado de las filas
 8000552:	4bc4      	ldr	r3, [pc, #784]	; (8000864 <main+0x3c8>)
 8000554:	691a      	ldr	r2, [r3, #16]
 8000556:	23f0      	movs	r3, #240	; 0xf0
 8000558:	011b      	lsls	r3, r3, #4
 800055a:	4013      	ands	r3, r2
 800055c:	607b      	str	r3, [r7, #4]

            for (int row = 0; row < 4; row++)
 800055e:	2300      	movs	r3, #0
 8000560:	613b      	str	r3, [r7, #16]
 8000562:	e196      	b.n	8000892 <main+0x3f6>
            {
                if (!(rows & (1 << (row + 8)))) // Detecta si alguna fila está activa (presionada)
 8000564:	693b      	ldr	r3, [r7, #16]
 8000566:	3308      	adds	r3, #8
 8000568:	2201      	movs	r2, #1
 800056a:	409a      	lsls	r2, r3
 800056c:	0013      	movs	r3, r2
 800056e:	001a      	movs	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4013      	ands	r3, r2
 8000574:	d000      	beq.n	8000578 <main+0xdc>
 8000576:	e189      	b.n	800088c <main+0x3f0>
                {
                    uint8_t key_number = col * 4 + row; // Ajusta el cálculo de key_number
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	b2db      	uxtb	r3, r3
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	b2d9      	uxtb	r1, r3
 8000580:	693b      	ldr	r3, [r7, #16]
 8000582:	b2da      	uxtb	r2, r3
 8000584:	1cfb      	adds	r3, r7, #3
 8000586:	188a      	adds	r2, r1, r2
 8000588:	701a      	strb	r2, [r3, #0]

                    switch (key_number)
 800058a:	1cfb      	adds	r3, r7, #3
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	3b03      	subs	r3, #3
 8000590:	2b0c      	cmp	r3, #12
 8000592:	d900      	bls.n	8000596 <main+0xfa>
 8000594:	e139      	b.n	800080a <main+0x36e>
 8000596:	009a      	lsls	r2, r3, #2
 8000598:	4bb5      	ldr	r3, [pc, #724]	; (8000870 <main+0x3d4>)
 800059a:	18d3      	adds	r3, r2, r3
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	469f      	mov	pc, r3
                    {
                    case KEY_D_INDEX:
                        // Resetear el valor almacenado y los dígitos del display a sus estados iniciales
                        valor_almacenado = 0;
 80005a0:	4bb4      	ldr	r3, [pc, #720]	; (8000874 <main+0x3d8>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
                        digito1_display = digito2_display = digito3_display = digito4_display = 0xFF;
 80005a6:	4bb4      	ldr	r3, [pc, #720]	; (8000878 <main+0x3dc>)
 80005a8:	22ff      	movs	r2, #255	; 0xff
 80005aa:	701a      	strb	r2, [r3, #0]
 80005ac:	4bb2      	ldr	r3, [pc, #712]	; (8000878 <main+0x3dc>)
 80005ae:	781a      	ldrb	r2, [r3, #0]
 80005b0:	4bb2      	ldr	r3, [pc, #712]	; (800087c <main+0x3e0>)
 80005b2:	701a      	strb	r2, [r3, #0]
 80005b4:	4bb1      	ldr	r3, [pc, #708]	; (800087c <main+0x3e0>)
 80005b6:	781a      	ldrb	r2, [r3, #0]
 80005b8:	4bb1      	ldr	r3, [pc, #708]	; (8000880 <main+0x3e4>)
 80005ba:	701a      	strb	r2, [r3, #0]
 80005bc:	4bb0      	ldr	r3, [pc, #704]	; (8000880 <main+0x3e4>)
 80005be:	781a      	ldrb	r2, [r3, #0]
 80005c0:	4bb0      	ldr	r3, [pc, #704]	; (8000884 <main+0x3e8>)
 80005c2:	701a      	strb	r2, [r3, #0]
                        break;
 80005c4:	e13b      	b.n	800083e <main+0x3a2>

                    case KEY_A_INDEX:
                        // Sumar los valores de los dígitos multiplicando cada uno por su respectivo peso posicional
                        valor_almacenado += codigo_tecla(digito1_display) + codigo_tecla(digito2_display) * 10 + codigo_tecla(digito3_display) * 100;
 80005c6:	4baf      	ldr	r3, [pc, #700]	; (8000884 <main+0x3e8>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	0018      	movs	r0, r3
 80005cc:	f7ff ff12 	bl	80003f4 <codigo_tecla>
 80005d0:	0003      	movs	r3, r0
 80005d2:	001c      	movs	r4, r3
 80005d4:	4baa      	ldr	r3, [pc, #680]	; (8000880 <main+0x3e4>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	0018      	movs	r0, r3
 80005da:	f7ff ff0b 	bl	80003f4 <codigo_tecla>
 80005de:	0003      	movs	r3, r0
 80005e0:	001a      	movs	r2, r3
 80005e2:	0013      	movs	r3, r2
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	189b      	adds	r3, r3, r2
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	18e4      	adds	r4, r4, r3
 80005ec:	4ba3      	ldr	r3, [pc, #652]	; (800087c <main+0x3e0>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	0018      	movs	r0, r3
 80005f2:	f7ff feff 	bl	80003f4 <codigo_tecla>
 80005f6:	0003      	movs	r3, r0
 80005f8:	001a      	movs	r2, r3
 80005fa:	2364      	movs	r3, #100	; 0x64
 80005fc:	4353      	muls	r3, r2
 80005fe:	18e3      	adds	r3, r4, r3
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b9c      	ldr	r3, [pc, #624]	; (8000874 <main+0x3d8>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	18d3      	adds	r3, r2, r3
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4b9a      	ldr	r3, [pc, #616]	; (8000874 <main+0x3d8>)
 800060c:	701a      	strb	r2, [r3, #0]
                        // Convertir el valor almacenado a su representación en los dígitos del display
                        digito1_display = numero(valor_almacenado % 10);
 800060e:	4b99      	ldr	r3, [pc, #612]	; (8000874 <main+0x3d8>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	210a      	movs	r1, #10
 8000614:	0018      	movs	r0, r3
 8000616:	f7ff fdfd 	bl	8000214 <__aeabi_uidivmod>
 800061a:	000b      	movs	r3, r1
 800061c:	b2db      	uxtb	r3, r3
 800061e:	0018      	movs	r0, r3
 8000620:	f7ff ff12 	bl	8000448 <numero>
 8000624:	0003      	movs	r3, r0
 8000626:	001a      	movs	r2, r3
 8000628:	4b96      	ldr	r3, [pc, #600]	; (8000884 <main+0x3e8>)
 800062a:	701a      	strb	r2, [r3, #0]
                        digito2_display = numero((valor_almacenado / 10) % 10);
 800062c:	4b91      	ldr	r3, [pc, #580]	; (8000874 <main+0x3d8>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	210a      	movs	r1, #10
 8000632:	0018      	movs	r0, r3
 8000634:	f7ff fd68 	bl	8000108 <__udivsi3>
 8000638:	0003      	movs	r3, r0
 800063a:	b2db      	uxtb	r3, r3
 800063c:	210a      	movs	r1, #10
 800063e:	0018      	movs	r0, r3
 8000640:	f7ff fde8 	bl	8000214 <__aeabi_uidivmod>
 8000644:	000b      	movs	r3, r1
 8000646:	b2db      	uxtb	r3, r3
 8000648:	0018      	movs	r0, r3
 800064a:	f7ff fefd 	bl	8000448 <numero>
 800064e:	0003      	movs	r3, r0
 8000650:	001a      	movs	r2, r3
 8000652:	4b8b      	ldr	r3, [pc, #556]	; (8000880 <main+0x3e4>)
 8000654:	701a      	strb	r2, [r3, #0]
                        digito3_display = numero((valor_almacenado / 100) % 10);
 8000656:	4b87      	ldr	r3, [pc, #540]	; (8000874 <main+0x3d8>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2164      	movs	r1, #100	; 0x64
 800065c:	0018      	movs	r0, r3
 800065e:	f7ff fd53 	bl	8000108 <__udivsi3>
 8000662:	0003      	movs	r3, r0
 8000664:	b2db      	uxtb	r3, r3
 8000666:	210a      	movs	r1, #10
 8000668:	0018      	movs	r0, r3
 800066a:	f7ff fdd3 	bl	8000214 <__aeabi_uidivmod>
 800066e:	000b      	movs	r3, r1
 8000670:	b2db      	uxtb	r3, r3
 8000672:	0018      	movs	r0, r3
 8000674:	f7ff fee8 	bl	8000448 <numero>
 8000678:	0003      	movs	r3, r0
 800067a:	001a      	movs	r2, r3
 800067c:	4b7f      	ldr	r3, [pc, #508]	; (800087c <main+0x3e0>)
 800067e:	701a      	strb	r2, [r3, #0]
                        digito4_display = 0xFF;  // Limpia el cuarto dígito
 8000680:	4b7d      	ldr	r3, [pc, #500]	; (8000878 <main+0x3dc>)
 8000682:	22ff      	movs	r2, #255	; 0xff
 8000684:	701a      	strb	r2, [r3, #0]
                        valor_almacenado = 0;    // Resetear el valor almacenado después de mostrarlo
 8000686:	4b7b      	ldr	r3, [pc, #492]	; (8000874 <main+0x3d8>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
                        break;
 800068c:	e0d7      	b.n	800083e <main+0x3a2>

                    case KEY_C_INDEX:
                        // Multiplicar los valores representados en los tres dígitos
                        valor_operacion = codigo_tecla(digito1_display) * codigo_tecla(digito2_display) * codigo_tecla(digito3_display);
 800068e:	4b7d      	ldr	r3, [pc, #500]	; (8000884 <main+0x3e8>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	0018      	movs	r0, r3
 8000694:	f7ff feae 	bl	80003f4 <codigo_tecla>
 8000698:	0003      	movs	r3, r0
 800069a:	001c      	movs	r4, r3
 800069c:	4b78      	ldr	r3, [pc, #480]	; (8000880 <main+0x3e4>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	0018      	movs	r0, r3
 80006a2:	f7ff fea7 	bl	80003f4 <codigo_tecla>
 80006a6:	0003      	movs	r3, r0
 80006a8:	435c      	muls	r4, r3
 80006aa:	4b74      	ldr	r3, [pc, #464]	; (800087c <main+0x3e0>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	0018      	movs	r0, r3
 80006b0:	f7ff fea0 	bl	80003f4 <codigo_tecla>
 80006b4:	0003      	movs	r3, r0
 80006b6:	4363      	muls	r3, r4
 80006b8:	001a      	movs	r2, r3
 80006ba:	4b73      	ldr	r3, [pc, #460]	; (8000888 <main+0x3ec>)
 80006bc:	601a      	str	r2, [r3, #0]
                        // Convertir el resultado de la operación a su representación en los dígitos del display
                        digito1_display = numero(valor_operacion % 10);
 80006be:	4b72      	ldr	r3, [pc, #456]	; (8000888 <main+0x3ec>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	210a      	movs	r1, #10
 80006c4:	0018      	movs	r0, r3
 80006c6:	f7ff fe8f 	bl	80003e8 <__aeabi_idivmod>
 80006ca:	000b      	movs	r3, r1
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	0018      	movs	r0, r3
 80006d0:	f7ff feba 	bl	8000448 <numero>
 80006d4:	0003      	movs	r3, r0
 80006d6:	001a      	movs	r2, r3
 80006d8:	4b6a      	ldr	r3, [pc, #424]	; (8000884 <main+0x3e8>)
 80006da:	701a      	strb	r2, [r3, #0]
                        digito2_display = numero((valor_operacion / 10) % 10);
 80006dc:	4b6a      	ldr	r3, [pc, #424]	; (8000888 <main+0x3ec>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	210a      	movs	r1, #10
 80006e2:	0018      	movs	r0, r3
 80006e4:	f7ff fd9a 	bl	800021c <__divsi3>
 80006e8:	0003      	movs	r3, r0
 80006ea:	210a      	movs	r1, #10
 80006ec:	0018      	movs	r0, r3
 80006ee:	f7ff fe7b 	bl	80003e8 <__aeabi_idivmod>
 80006f2:	000b      	movs	r3, r1
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	0018      	movs	r0, r3
 80006f8:	f7ff fea6 	bl	8000448 <numero>
 80006fc:	0003      	movs	r3, r0
 80006fe:	001a      	movs	r2, r3
 8000700:	4b5f      	ldr	r3, [pc, #380]	; (8000880 <main+0x3e4>)
 8000702:	701a      	strb	r2, [r3, #0]
                        digito3_display = numero((valor_operacion / 100) % 10);
 8000704:	4b60      	ldr	r3, [pc, #384]	; (8000888 <main+0x3ec>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2164      	movs	r1, #100	; 0x64
 800070a:	0018      	movs	r0, r3
 800070c:	f7ff fd86 	bl	800021c <__divsi3>
 8000710:	0003      	movs	r3, r0
 8000712:	210a      	movs	r1, #10
 8000714:	0018      	movs	r0, r3
 8000716:	f7ff fe67 	bl	80003e8 <__aeabi_idivmod>
 800071a:	000b      	movs	r3, r1
 800071c:	b2db      	uxtb	r3, r3
 800071e:	0018      	movs	r0, r3
 8000720:	f7ff fe92 	bl	8000448 <numero>
 8000724:	0003      	movs	r3, r0
 8000726:	001a      	movs	r2, r3
 8000728:	4b54      	ldr	r3, [pc, #336]	; (800087c <main+0x3e0>)
 800072a:	701a      	strb	r2, [r3, #0]
                        digito4_display = 0xFF; // Limpia el cuarto dígito
 800072c:	4b52      	ldr	r3, [pc, #328]	; (8000878 <main+0x3dc>)
 800072e:	22ff      	movs	r2, #255	; 0xff
 8000730:	701a      	strb	r2, [r3, #0]
                        break;
 8000732:	e084      	b.n	800083e <main+0x3a2>

                    case KEY_F_INDEX:
                        // Realizar una división, evitando la división por cero
                        if (codigo_tecla(digito1_display) != 0) {
 8000734:	4b53      	ldr	r3, [pc, #332]	; (8000884 <main+0x3e8>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	0018      	movs	r0, r3
 800073a:	f7ff fe5b 	bl	80003f4 <codigo_tecla>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d010      	beq.n	8000764 <main+0x2c8>
                            valor_almacenado /= codigo_tecla(digito1_display);
 8000742:	4b50      	ldr	r3, [pc, #320]	; (8000884 <main+0x3e8>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	0018      	movs	r0, r3
 8000748:	f7ff fe54 	bl	80003f4 <codigo_tecla>
 800074c:	0003      	movs	r3, r0
 800074e:	001a      	movs	r2, r3
 8000750:	4b48      	ldr	r3, [pc, #288]	; (8000874 <main+0x3d8>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	0011      	movs	r1, r2
 8000756:	0018      	movs	r0, r3
 8000758:	f7ff fcd6 	bl	8000108 <__udivsi3>
 800075c:	0003      	movs	r3, r0
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b44      	ldr	r3, [pc, #272]	; (8000874 <main+0x3d8>)
 8000762:	701a      	strb	r2, [r3, #0]
                        }
                        // Convertir el valor almacenado a su representación en los dígitos del display
                        digito1_display = numero(valor_almacenado % 10);
 8000764:	4b43      	ldr	r3, [pc, #268]	; (8000874 <main+0x3d8>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	210a      	movs	r1, #10
 800076a:	0018      	movs	r0, r3
 800076c:	f7ff fd52 	bl	8000214 <__aeabi_uidivmod>
 8000770:	000b      	movs	r3, r1
 8000772:	b2db      	uxtb	r3, r3
 8000774:	0018      	movs	r0, r3
 8000776:	f7ff fe67 	bl	8000448 <numero>
 800077a:	0003      	movs	r3, r0
 800077c:	001a      	movs	r2, r3
 800077e:	4b41      	ldr	r3, [pc, #260]	; (8000884 <main+0x3e8>)
 8000780:	701a      	strb	r2, [r3, #0]
                        digito2_display = numero((valor_almacenado / 10) % 10);
 8000782:	4b3c      	ldr	r3, [pc, #240]	; (8000874 <main+0x3d8>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	210a      	movs	r1, #10
 8000788:	0018      	movs	r0, r3
 800078a:	f7ff fcbd 	bl	8000108 <__udivsi3>
 800078e:	0003      	movs	r3, r0
 8000790:	b2db      	uxtb	r3, r3
 8000792:	210a      	movs	r1, #10
 8000794:	0018      	movs	r0, r3
 8000796:	f7ff fd3d 	bl	8000214 <__aeabi_uidivmod>
 800079a:	000b      	movs	r3, r1
 800079c:	b2db      	uxtb	r3, r3
 800079e:	0018      	movs	r0, r3
 80007a0:	f7ff fe52 	bl	8000448 <numero>
 80007a4:	0003      	movs	r3, r0
 80007a6:	001a      	movs	r2, r3
 80007a8:	4b35      	ldr	r3, [pc, #212]	; (8000880 <main+0x3e4>)
 80007aa:	701a      	strb	r2, [r3, #0]
                        digito3_display = numero((valor_almacenado / 100) % 10);
 80007ac:	4b31      	ldr	r3, [pc, #196]	; (8000874 <main+0x3d8>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2164      	movs	r1, #100	; 0x64
 80007b2:	0018      	movs	r0, r3
 80007b4:	f7ff fca8 	bl	8000108 <__udivsi3>
 80007b8:	0003      	movs	r3, r0
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	210a      	movs	r1, #10
 80007be:	0018      	movs	r0, r3
 80007c0:	f7ff fd28 	bl	8000214 <__aeabi_uidivmod>
 80007c4:	000b      	movs	r3, r1
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	0018      	movs	r0, r3
 80007ca:	f7ff fe3d 	bl	8000448 <numero>
 80007ce:	0003      	movs	r3, r0
 80007d0:	001a      	movs	r2, r3
 80007d2:	4b2a      	ldr	r3, [pc, #168]	; (800087c <main+0x3e0>)
 80007d4:	701a      	strb	r2, [r3, #0]
                        digito4_display = 0xFF; // Limpia el cuarto dígito
 80007d6:	4b28      	ldr	r3, [pc, #160]	; (8000878 <main+0x3dc>)
 80007d8:	22ff      	movs	r2, #255	; 0xff
 80007da:	701a      	strb	r2, [r3, #0]
                        valor_almacenado = 0;   // Resetear el valor almacenado después de mostrarlo
 80007dc:	4b25      	ldr	r3, [pc, #148]	; (8000874 <main+0x3d8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
                        break;
 80007e2:	e02c      	b.n	800083e <main+0x3a2>

                    case KEY_E_INDEX:
                        // Resetear el valor almacenado y los dígitos del display
                        valor_almacenado = 0;
 80007e4:	4b23      	ldr	r3, [pc, #140]	; (8000874 <main+0x3d8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
                        digito1_display = digito2_display = digito3_display = digito4_display = 0xFF;
 80007ea:	4b23      	ldr	r3, [pc, #140]	; (8000878 <main+0x3dc>)
 80007ec:	22ff      	movs	r2, #255	; 0xff
 80007ee:	701a      	strb	r2, [r3, #0]
 80007f0:	4b21      	ldr	r3, [pc, #132]	; (8000878 <main+0x3dc>)
 80007f2:	781a      	ldrb	r2, [r3, #0]
 80007f4:	4b21      	ldr	r3, [pc, #132]	; (800087c <main+0x3e0>)
 80007f6:	701a      	strb	r2, [r3, #0]
 80007f8:	4b20      	ldr	r3, [pc, #128]	; (800087c <main+0x3e0>)
 80007fa:	781a      	ldrb	r2, [r3, #0]
 80007fc:	4b20      	ldr	r3, [pc, #128]	; (8000880 <main+0x3e4>)
 80007fe:	701a      	strb	r2, [r3, #0]
 8000800:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <main+0x3e4>)
 8000802:	781a      	ldrb	r2, [r3, #0]
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <main+0x3e8>)
 8000806:	701a      	strb	r2, [r3, #0]
                        break;
 8000808:	e019      	b.n	800083e <main+0x3a2>

                    default:
                        // Desplazar los dígitos y mostrar el nuevo número en el dígito más a la derecha
                        digito4_display = digito3_display;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <main+0x3e0>)
 800080c:	781a      	ldrb	r2, [r3, #0]
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <main+0x3dc>)
 8000810:	701a      	strb	r2, [r3, #0]
                        digito3_display = digito2_display;
 8000812:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <main+0x3e4>)
 8000814:	781a      	ldrb	r2, [r3, #0]
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <main+0x3e0>)
 8000818:	701a      	strb	r2, [r3, #0]
                        digito2_display = digito1_display;
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <main+0x3e8>)
 800081c:	781a      	ldrb	r2, [r3, #0]
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <main+0x3e4>)
 8000820:	701a      	strb	r2, [r3, #0]
                        // Convertir el número de la tecla presionada a su representación en el display
                        digito1_display = numero(codigo_tecla(key_number));
 8000822:	1cfb      	adds	r3, r7, #3
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	0018      	movs	r0, r3
 8000828:	f7ff fde4 	bl	80003f4 <codigo_tecla>
 800082c:	0003      	movs	r3, r0
 800082e:	0018      	movs	r0, r3
 8000830:	f7ff fe0a 	bl	8000448 <numero>
 8000834:	0003      	movs	r3, r0
 8000836:	001a      	movs	r2, r3
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <main+0x3e8>)
 800083a:	701a      	strb	r2, [r3, #0]
                        break;
 800083c:	46c0      	nop			; (mov r8, r8)

                    }

                    while (!(GPIOB->IDR & (1 << (row + 8)))); // Espera a que la tecla se suelte
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <main+0x3c8>)
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	693a      	ldr	r2, [r7, #16]
 8000846:	3208      	adds	r2, #8
 8000848:	2101      	movs	r1, #1
 800084a:	4091      	lsls	r1, r2
 800084c:	000a      	movs	r2, r1
 800084e:	4013      	ands	r3, r2
 8000850:	d0f6      	beq.n	8000840 <main+0x3a4>
                    break; // Sale del bucle de filas para evitar múltiples lecturas
 8000852:	e022      	b.n	800089a <main+0x3fe>
 8000854:	40021000 	.word	0x40021000
 8000858:	00055500 	.word	0x00055500
 800085c:	50000800 	.word	0x50000800
 8000860:	fff000ff 	.word	0xfff000ff
 8000864:	50000400 	.word	0x50000400
 8000868:	00005555 	.word	0x00005555
 800086c:	ff00ffff 	.word	0xff00ffff
 8000870:	08000c7c 	.word	0x08000c7c
 8000874:	20000020 	.word	0x20000020
 8000878:	20000003 	.word	0x20000003
 800087c:	20000002 	.word	0x20000002
 8000880:	20000001 	.word	0x20000001
 8000884:	20000000 	.word	0x20000000
 8000888:	20000024 	.word	0x20000024
            for (int row = 0; row < 4; row++)
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	3301      	adds	r3, #1
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	2b03      	cmp	r3, #3
 8000896:	dc00      	bgt.n	800089a <main+0x3fe>
 8000898:	e664      	b.n	8000564 <main+0xc8>
                }
            }
            GPIOB->ODR |= (1 << (12 + col)); // Desactiva la columna actual antes de continuar
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <main+0x440>)
 800089c:	695a      	ldr	r2, [r3, #20]
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	330c      	adds	r3, #12
 80008a2:	2101      	movs	r1, #1
 80008a4:	4099      	lsls	r1, r3
 80008a6:	000b      	movs	r3, r1
 80008a8:	0019      	movs	r1, r3
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <main+0x440>)
 80008ac:	430a      	orrs	r2, r1
 80008ae:	615a      	str	r2, [r3, #20]
        for (int col = 0; col < 4; col++)
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	3301      	adds	r3, #1
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	dc00      	bgt.n	80008be <main+0x422>
 80008bc:	e636      	b.n	800052c <main+0x90>
        }

        // Llama a la función act_valores para actualizar los valores mostrados en los displays.
        act_valores();
 80008be:	f000 f82d 	bl	800091c <act_valores>

        // Actualiza valor_almacenado para mantenerlo dentro del rango de 0 a 999.
        // El uso del operador módulo (%) asegura que valor_almacenado no exceda 999,
        // lo cual puede ser útil para evitar desbordamientos o mantener el número dentro de un rango visible en un display limitado.
        valor_almacenado = valor_almacenado % 1000;
 80008c2:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <main+0x444>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	001a      	movs	r2, r3
 80008c8:	23fa      	movs	r3, #250	; 0xfa
 80008ca:	0099      	lsls	r1, r3, #2
 80008cc:	0010      	movs	r0, r2
 80008ce:	f7ff fd8b 	bl	80003e8 <__aeabi_idivmod>
 80008d2:	000b      	movs	r3, r1
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b02      	ldr	r3, [pc, #8]	; (80008e0 <main+0x444>)
 80008d8:	701a      	strb	r2, [r3, #0]
        for (int col = 0; col < 4; col++)
 80008da:	e624      	b.n	8000526 <main+0x8a>
 80008dc:	50000400 	.word	0x50000400
 80008e0:	20000020 	.word	0x20000020

080008e4 <retraso>:
}



// Función para crear un retardo de aproximadamente n milisegundos
void retraso(uint16_t n) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	0002      	movs	r2, r0
 80008ec:	1dbb      	adds	r3, r7, #6
 80008ee:	801a      	strh	r2, [r3, #0]
    // Inicia un bucle que se repite n * 10 veces
    // El factor de 10 es un ajuste basado en la velocidad a la que se ejecuta el bucle
    // y la frecuencia de la CPU para aproximarse a un milisegundo por iteración de n
    for (uint32_t i = 0; i < n * 10; i++) {
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	e003      	b.n	80008fe <retraso+0x1a>
        // La instrucción NOP (No OPeration) es una instrucción de ensamblador que no hace nada
        // Se utiliza aquí para consumir tiempo de CPU sin realizar ninguna operación
        __asm__("NOP");
 80008f6:	46c0      	nop			; (mov r8, r8)
    for (uint32_t i = 0; i < n * 10; i++) {
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	3301      	adds	r3, #1
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	1dbb      	adds	r3, r7, #6
 8000900:	881a      	ldrh	r2, [r3, #0]
 8000902:	0013      	movs	r3, r2
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	189b      	adds	r3, r3, r2
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	001a      	movs	r2, r3
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4293      	cmp	r3, r2
 8000910:	d3f1      	bcc.n	80008f6 <retraso+0x12>
    }
}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b004      	add	sp, #16
 800091a:	bd80      	pop	{r7, pc}

0800091c <act_valores>:



void act_valores(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
    // Itera a través de cada dígito posible (4 en total)
    for (int i = 0; i < 4; i++) {
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	e0ad      	b.n	8000a84 <act_valores+0x168>
        // Utiliza un switch para determinar cuál dígito se está procesando
        switch (i) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b03      	cmp	r3, #3
 800092c:	d100      	bne.n	8000930 <act_valores+0x14>
 800092e:	e07b      	b.n	8000a28 <act_valores+0x10c>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b03      	cmp	r3, #3
 8000934:	dd00      	ble.n	8000938 <act_valores+0x1c>
 8000936:	e0a2      	b.n	8000a7e <act_valores+0x162>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2b02      	cmp	r3, #2
 800093c:	d053      	beq.n	80009e6 <act_valores+0xca>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b02      	cmp	r3, #2
 8000942:	dd00      	ble.n	8000946 <act_valores+0x2a>
 8000944:	e09b      	b.n	8000a7e <act_valores+0x162>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d003      	beq.n	8000954 <act_valores+0x38>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d029      	beq.n	80009a6 <act_valores+0x8a>
 8000952:	e094      	b.n	8000a7e <act_valores+0x162>
            case 0: // Caso para el primer dígito
                // Verifica si el primer dígito debe mostrarse (no es 0xFF)
                if (digito1_display != 0xFF) {
 8000954:	4b50      	ldr	r3, [pc, #320]	; (8000a98 <act_valores+0x17c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2bff      	cmp	r3, #255	; 0xff
 800095a:	d100      	bne.n	800095e <act_valores+0x42>
 800095c:	e088      	b.n	8000a70 <act_valores+0x154>
                    // Apaga todos los dígitos antes de actualizar
                    GPIOC->BSRR = 1 << (5 + 16);
 800095e:	4b4f      	ldr	r3, [pc, #316]	; (8000a9c <act_valores+0x180>)
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	0392      	lsls	r2, r2, #14
 8000964:	619a      	str	r2, [r3, #24]
                    GPIOC->BSRR = 1 << (6 + 16);
 8000966:	4b4d      	ldr	r3, [pc, #308]	; (8000a9c <act_valores+0x180>)
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	03d2      	lsls	r2, r2, #15
 800096c:	619a      	str	r2, [r3, #24]
                    GPIOC->BSRR = 1 << (8 + 16);
 800096e:	4b4b      	ldr	r3, [pc, #300]	; (8000a9c <act_valores+0x180>)
 8000970:	2280      	movs	r2, #128	; 0x80
 8000972:	0452      	lsls	r2, r2, #17
 8000974:	619a      	str	r2, [r3, #24]
                    GPIOC->BSRR = 1 << (7 + 16);
 8000976:	4b49      	ldr	r3, [pc, #292]	; (8000a9c <act_valores+0x180>)
 8000978:	2280      	movs	r2, #128	; 0x80
 800097a:	0412      	lsls	r2, r2, #16
 800097c:	619a      	str	r2, [r3, #24]

                    // Enciende el primer dígito
                    GPIOC->BSRR = 1 << 5;
 800097e:	4b47      	ldr	r3, [pc, #284]	; (8000a9c <act_valores+0x180>)
 8000980:	2220      	movs	r2, #32
 8000982:	619a      	str	r2, [r3, #24]
                    // Apaga todos los segmentos antes de mostrar el nuevo valor
                    GPIOB->BSRR = 0xFF << 16;
 8000984:	4b46      	ldr	r3, [pc, #280]	; (8000aa0 <act_valores+0x184>)
 8000986:	22ff      	movs	r2, #255	; 0xff
 8000988:	0412      	lsls	r2, r2, #16
 800098a:	619a      	str	r2, [r3, #24]
                    // Muestra el valor en el dígito actual
                    GPIOB->BSRR = decodificador(digito1_display);
 800098c:	4b42      	ldr	r3, [pc, #264]	; (8000a98 <act_valores+0x17c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	0018      	movs	r0, r3
 8000992:	f000 f88d 	bl	8000ab0 <decodificador>
 8000996:	0003      	movs	r3, r0
 8000998:	001a      	movs	r2, r3
 800099a:	4b41      	ldr	r3, [pc, #260]	; (8000aa0 <act_valores+0x184>)
 800099c:	619a      	str	r2, [r3, #24]
                    // Retardo para permitir que el valor se muestre correctamente
                    retraso(5);
 800099e:	2005      	movs	r0, #5
 80009a0:	f7ff ffa0 	bl	80008e4 <retraso>
                }
                break;
 80009a4:	e064      	b.n	8000a70 <act_valores+0x154>

            case 1: // Caso para el segundo dígito
                if (digito2_display != 0xFF) {
 80009a6:	4b3f      	ldr	r3, [pc, #252]	; (8000aa4 <act_valores+0x188>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2bff      	cmp	r3, #255	; 0xff
 80009ac:	d062      	beq.n	8000a74 <act_valores+0x158>
                    GPIOC->BSRR = 1 << (8 + 16);
 80009ae:	4b3b      	ldr	r3, [pc, #236]	; (8000a9c <act_valores+0x180>)
 80009b0:	2280      	movs	r2, #128	; 0x80
 80009b2:	0452      	lsls	r2, r2, #17
 80009b4:	619a      	str	r2, [r3, #24]
                    GPIOC->BSRR = 1 << (5 + 16);
 80009b6:	4b39      	ldr	r3, [pc, #228]	; (8000a9c <act_valores+0x180>)
 80009b8:	2280      	movs	r2, #128	; 0x80
 80009ba:	0392      	lsls	r2, r2, #14
 80009bc:	619a      	str	r2, [r3, #24]
                    GPIOC->BSRR = 1 << 6;
 80009be:	4b37      	ldr	r3, [pc, #220]	; (8000a9c <act_valores+0x180>)
 80009c0:	2240      	movs	r2, #64	; 0x40
 80009c2:	619a      	str	r2, [r3, #24]
                    GPIOB->BSRR = 0xFF << 16;
 80009c4:	4b36      	ldr	r3, [pc, #216]	; (8000aa0 <act_valores+0x184>)
 80009c6:	22ff      	movs	r2, #255	; 0xff
 80009c8:	0412      	lsls	r2, r2, #16
 80009ca:	619a      	str	r2, [r3, #24]
                    GPIOB->BSRR = decodificador(digito2_display);
 80009cc:	4b35      	ldr	r3, [pc, #212]	; (8000aa4 <act_valores+0x188>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	0018      	movs	r0, r3
 80009d2:	f000 f86d 	bl	8000ab0 <decodificador>
 80009d6:	0003      	movs	r3, r0
 80009d8:	001a      	movs	r2, r3
 80009da:	4b31      	ldr	r3, [pc, #196]	; (8000aa0 <act_valores+0x184>)
 80009dc:	619a      	str	r2, [r3, #24]
                    retraso(5);
 80009de:	2005      	movs	r0, #5
 80009e0:	f7ff ff80 	bl	80008e4 <retraso>
                }
                break;
 80009e4:	e046      	b.n	8000a74 <act_valores+0x158>

            case 2: // Caso para el tercer dígito
                if (digito3_display != 0xFF) {
 80009e6:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <act_valores+0x18c>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2bff      	cmp	r3, #255	; 0xff
 80009ec:	d044      	beq.n	8000a78 <act_valores+0x15c>
                    GPIOC->BSRR = 1 << (6 + 16);
 80009ee:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <act_valores+0x180>)
 80009f0:	2280      	movs	r2, #128	; 0x80
 80009f2:	03d2      	lsls	r2, r2, #15
 80009f4:	619a      	str	r2, [r3, #24]
                    GPIOC->BSRR = 1 << (5 + 16);
 80009f6:	4b29      	ldr	r3, [pc, #164]	; (8000a9c <act_valores+0x180>)
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	0392      	lsls	r2, r2, #14
 80009fc:	619a      	str	r2, [r3, #24]
                    GPIOC->BSRR = 1 << 8;
 80009fe:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <act_valores+0x180>)
 8000a00:	2280      	movs	r2, #128	; 0x80
 8000a02:	0052      	lsls	r2, r2, #1
 8000a04:	619a      	str	r2, [r3, #24]
                    GPIOB->BSRR = 0xFF << 16;
 8000a06:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <act_valores+0x184>)
 8000a08:	22ff      	movs	r2, #255	; 0xff
 8000a0a:	0412      	lsls	r2, r2, #16
 8000a0c:	619a      	str	r2, [r3, #24]
                    GPIOB->BSRR = decodificador(digito3_display);
 8000a0e:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <act_valores+0x18c>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	0018      	movs	r0, r3
 8000a14:	f000 f84c 	bl	8000ab0 <decodificador>
 8000a18:	0003      	movs	r3, r0
 8000a1a:	001a      	movs	r2, r3
 8000a1c:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <act_valores+0x184>)
 8000a1e:	619a      	str	r2, [r3, #24]
                    retraso(5);
 8000a20:	2005      	movs	r0, #5
 8000a22:	f7ff ff5f 	bl	80008e4 <retraso>
                }
                break;
 8000a26:	e027      	b.n	8000a78 <act_valores+0x15c>

            case 3: // Caso para el cuarto dígito
                if (digito4_display != 0xFF) {
 8000a28:	4b20      	ldr	r3, [pc, #128]	; (8000aac <act_valores+0x190>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2bff      	cmp	r3, #255	; 0xff
 8000a2e:	d025      	beq.n	8000a7c <act_valores+0x160>
                    GPIOC->BSRR = 1 << (5 + 16);
 8000a30:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <act_valores+0x180>)
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	0392      	lsls	r2, r2, #14
 8000a36:	619a      	str	r2, [r3, #24]
                    GPIOC->BSRR = 1 << (6 + 16);
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <act_valores+0x180>)
 8000a3a:	2280      	movs	r2, #128	; 0x80
 8000a3c:	03d2      	lsls	r2, r2, #15
 8000a3e:	619a      	str	r2, [r3, #24]
                    GPIOC->BSRR = 1 << (8 + 16);
 8000a40:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <act_valores+0x180>)
 8000a42:	2280      	movs	r2, #128	; 0x80
 8000a44:	0452      	lsls	r2, r2, #17
 8000a46:	619a      	str	r2, [r3, #24]
                    GPIOC->BSRR = 1 << 7;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <act_valores+0x180>)
 8000a4a:	2280      	movs	r2, #128	; 0x80
 8000a4c:	619a      	str	r2, [r3, #24]
                    GPIOB->BSRR = 0xFF << 16;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <act_valores+0x184>)
 8000a50:	22ff      	movs	r2, #255	; 0xff
 8000a52:	0412      	lsls	r2, r2, #16
 8000a54:	619a      	str	r2, [r3, #24]
                    GPIOB->BSRR = decodificador(digito4_display);
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <act_valores+0x190>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f000 f828 	bl	8000ab0 <decodificador>
 8000a60:	0003      	movs	r3, r0
 8000a62:	001a      	movs	r2, r3
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <act_valores+0x184>)
 8000a66:	619a      	str	r2, [r3, #24]
                    retraso(5);
 8000a68:	2005      	movs	r0, #5
 8000a6a:	f7ff ff3b 	bl	80008e4 <retraso>
                }
                break;
 8000a6e:	e005      	b.n	8000a7c <act_valores+0x160>
                break;
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	e004      	b.n	8000a7e <act_valores+0x162>
                break;
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	e002      	b.n	8000a7e <act_valores+0x162>
                break;
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	e000      	b.n	8000a7e <act_valores+0x162>
                break;
 8000a7c:	46c0      	nop			; (mov r8, r8)
    for (int i = 0; i < 4; i++) {
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	3301      	adds	r3, #1
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b03      	cmp	r3, #3
 8000a88:	dc00      	bgt.n	8000a8c <act_valores+0x170>
 8000a8a:	e74d      	b.n	8000928 <act_valores+0xc>
        }
    }
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b002      	add	sp, #8
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	50000800 	.word	0x50000800
 8000aa0:	50000400 	.word	0x50000400
 8000aa4:	20000001 	.word	0x20000001
 8000aa8:	20000002 	.word	0x20000002
 8000aac:	20000003 	.word	0x20000003

08000ab0 <decodificador>:


// Función para decodificar un número en su representación para un display de 7 segmentos
uint8_t decodificador(uint8_t number) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	0002      	movs	r2, r0
 8000ab8:	1dfb      	adds	r3, r7, #7
 8000aba:	701a      	strb	r2, [r3, #0]
    // Inicializa la variable key que almacenará el valor decodificado
    uint8_t key = 0;
 8000abc:	230f      	movs	r3, #15
 8000abe:	18fb      	adds	r3, r7, r3
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]

    // Usa un switch para mapear el número de entrada a su representación en el display de 7 segmentos
    switch (number) {
 8000ac4:	1dfb      	adds	r3, r7, #7
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b0d      	cmp	r3, #13
 8000aca:	d836      	bhi.n	8000b3a <decodificador+0x8a>
 8000acc:	009a      	lsls	r2, r3, #2
 8000ace:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <decodificador+0xa0>)
 8000ad0:	18d3      	adds	r3, r2, r3
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	469f      	mov	pc, r3
        case 0: key = 0; break; // Si el número es 0, asigna 0 a key
 8000ad6:	230f      	movs	r3, #15
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
 8000ade:	e02e      	b.n	8000b3e <decodificador+0x8e>
        case 1: key = 1; break; // Si el número es 1, asigna 1 a key
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	18fb      	adds	r3, r7, r3
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	701a      	strb	r2, [r3, #0]
 8000ae8:	e029      	b.n	8000b3e <decodificador+0x8e>
        case 2: key = 2; break; // Si el número es 2, asigna 2 a key
 8000aea:	230f      	movs	r3, #15
 8000aec:	18fb      	adds	r3, r7, r3
 8000aee:	2202      	movs	r2, #2
 8000af0:	701a      	strb	r2, [r3, #0]
 8000af2:	e024      	b.n	8000b3e <decodificador+0x8e>
        case 4: key = 4; break; // Si el número es 4, asigna 4 a key
 8000af4:	230f      	movs	r3, #15
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	2204      	movs	r2, #4
 8000afa:	701a      	strb	r2, [r3, #0]
 8000afc:	e01f      	b.n	8000b3e <decodificador+0x8e>
        case 5: key = 5; break; // Si el número es 5, asigna 5 a key
 8000afe:	230f      	movs	r3, #15
 8000b00:	18fb      	adds	r3, r7, r3
 8000b02:	2205      	movs	r2, #5
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	e01a      	b.n	8000b3e <decodificador+0x8e>
        case 6: key = 6; break; // Si el número es 6, asigna 6 a key
 8000b08:	230f      	movs	r3, #15
 8000b0a:	18fb      	adds	r3, r7, r3
 8000b0c:	2206      	movs	r2, #6
 8000b0e:	701a      	strb	r2, [r3, #0]
 8000b10:	e015      	b.n	8000b3e <decodificador+0x8e>
        case 8: key = 8; break; // Si el número es 8, asigna 8 a key
 8000b12:	230f      	movs	r3, #15
 8000b14:	18fb      	adds	r3, r7, r3
 8000b16:	2208      	movs	r2, #8
 8000b18:	701a      	strb	r2, [r3, #0]
 8000b1a:	e010      	b.n	8000b3e <decodificador+0x8e>
        case 9: key = 9; break; // Si el número es 9, asigna 9 a key
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	18fb      	adds	r3, r7, r3
 8000b20:	2209      	movs	r2, #9
 8000b22:	701a      	strb	r2, [r3, #0]
 8000b24:	e00b      	b.n	8000b3e <decodificador+0x8e>
        case 10: key = 10; break; // Si el número es 10, asigna 10 a key
 8000b26:	230f      	movs	r3, #15
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	220a      	movs	r2, #10
 8000b2c:	701a      	strb	r2, [r3, #0]
 8000b2e:	e006      	b.n	8000b3e <decodificador+0x8e>
        case 13: key = 13; break; // Si el número es 13, asigna 13 a key
 8000b30:	230f      	movs	r3, #15
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	220d      	movs	r2, #13
 8000b36:	701a      	strb	r2, [r3, #0]
 8000b38:	e001      	b.n	8000b3e <decodificador+0x8e>
        default: return 13; // En cualquier otro caso, retorna 13 (probablemente un valor de error o indefinido)
 8000b3a:	230d      	movs	r3, #13
 8000b3c:	e004      	b.n	8000b48 <decodificador+0x98>
    }

    // Retorna la representación del número para el display de 7 segmentos, usando el array key_to_display
    return key_to_display[key];
 8000b3e:	230f      	movs	r3, #15
 8000b40:	18fb      	adds	r3, r7, r3
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4a03      	ldr	r2, [pc, #12]	; (8000b54 <decodificador+0xa4>)
 8000b46:	5cd3      	ldrb	r3, [r2, r3]
}
 8000b48:	0018      	movs	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b004      	add	sp, #16
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	08000cb0 	.word	0x08000cb0
 8000b54:	08000c0c 	.word	0x08000c0c

08000b58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b58:	480d      	ldr	r0, [pc, #52]	; (8000b90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b5c:	e000      	b.n	8000b60 <Reset_Handler+0x8>
 8000b5e:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b62:	490d      	ldr	r1, [pc, #52]	; (8000b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b64:	4a0d      	ldr	r2, [pc, #52]	; (8000b9c <LoopForever+0xe>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b68:	e002      	b.n	8000b70 <LoopCopyDataInit>

08000b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6e:	3304      	adds	r3, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b74:	d3f9      	bcc.n	8000b6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b78:	4c0a      	ldr	r4, [pc, #40]	; (8000ba4 <LoopForever+0x16>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b7c:	e001      	b.n	8000b82 <LoopFillZerobss>

08000b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b80:	3204      	adds	r2, #4

08000b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b84:	d3fb      	bcc.n	8000b7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b86:	f000 f811 	bl	8000bac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b8a:	f7ff fc87 	bl	800049c <main>

08000b8e <LoopForever>:

LoopForever:
  b LoopForever
 8000b8e:	e7fe      	b.n	8000b8e <LoopForever>
  ldr   r0, =_estack
 8000b90:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b98:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000b9c:	08000cf0 	.word	0x08000cf0
  ldr r2, =_sbss
 8000ba0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000ba4:	20000028 	.word	0x20000028

08000ba8 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba8:	e7fe      	b.n	8000ba8 <ADC_COMP_IRQHandler>
	...

08000bac <__libc_init_array>:
 8000bac:	b570      	push	{r4, r5, r6, lr}
 8000bae:	2600      	movs	r6, #0
 8000bb0:	4c0c      	ldr	r4, [pc, #48]	; (8000be4 <__libc_init_array+0x38>)
 8000bb2:	4d0d      	ldr	r5, [pc, #52]	; (8000be8 <__libc_init_array+0x3c>)
 8000bb4:	1b64      	subs	r4, r4, r5
 8000bb6:	10a4      	asrs	r4, r4, #2
 8000bb8:	42a6      	cmp	r6, r4
 8000bba:	d109      	bne.n	8000bd0 <__libc_init_array+0x24>
 8000bbc:	2600      	movs	r6, #0
 8000bbe:	f000 f819 	bl	8000bf4 <_init>
 8000bc2:	4c0a      	ldr	r4, [pc, #40]	; (8000bec <__libc_init_array+0x40>)
 8000bc4:	4d0a      	ldr	r5, [pc, #40]	; (8000bf0 <__libc_init_array+0x44>)
 8000bc6:	1b64      	subs	r4, r4, r5
 8000bc8:	10a4      	asrs	r4, r4, #2
 8000bca:	42a6      	cmp	r6, r4
 8000bcc:	d105      	bne.n	8000bda <__libc_init_array+0x2e>
 8000bce:	bd70      	pop	{r4, r5, r6, pc}
 8000bd0:	00b3      	lsls	r3, r6, #2
 8000bd2:	58eb      	ldr	r3, [r5, r3]
 8000bd4:	4798      	blx	r3
 8000bd6:	3601      	adds	r6, #1
 8000bd8:	e7ee      	b.n	8000bb8 <__libc_init_array+0xc>
 8000bda:	00b3      	lsls	r3, r6, #2
 8000bdc:	58eb      	ldr	r3, [r5, r3]
 8000bde:	4798      	blx	r3
 8000be0:	3601      	adds	r6, #1
 8000be2:	e7f2      	b.n	8000bca <__libc_init_array+0x1e>
 8000be4:	08000ce8 	.word	0x08000ce8
 8000be8:	08000ce8 	.word	0x08000ce8
 8000bec:	08000cec 	.word	0x08000cec
 8000bf0:	08000ce8 	.word	0x08000ce8

08000bf4 <_init>:
 8000bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bfa:	bc08      	pop	{r3}
 8000bfc:	469e      	mov	lr, r3
 8000bfe:	4770      	bx	lr

08000c00 <_fini>:
 8000c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c06:	bc08      	pop	{r3}
 8000c08:	469e      	mov	lr, r3
 8000c0a:	4770      	bx	lr
